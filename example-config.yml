# Debug (bool)
# Default False
debug: true

# Render a virtual display in the console output
# Default False
virtualDisplay: false

# Sets the log level when in production (production is when debug is False).
# debug | info | warn (or warning) | error | critical
# Default: info
# Log level (str)
productionLogLevel: info

# Api server (str)
# Which server the radio should connect to. The server is where the radio
# registers, gets it's channels and information.
apiServer: https://radio.tokheimgrafisk.no

# Automatic updates (bool)
# If enabled, checks for updates every night at 03:30.
autoUpdate: true

# Save listening history (bool)
# Whether to store the listening history on the server.
# For analytic and statistic purposes.
saveListeningHistory: true

# Send state (bool)
# Whether to report the radio's state to the API.
# Reports if the radio is on or off and it's local IP
sendState: true

# Verify certificate (bool)
# Whether to verify the apiServer's certificate or not. This is highly recommended
# unless you run the server locally.
verifyCertificate: true

# TODO: Move to the API
language: nno

# Long press threshold (int)
# Time in milliseconds you have to hold buttons to register a long press
longPressThreshold: 600

# Very long press threshold (int)
# Time in milliseconds you have to hold buttons to register a very long press
veryLongPressThreshold: 5000

# Channel switch delay (int)
# Time in seconds the channel switch should be delayed.
# This is useful to limit the amount of unnecessary requests. Ie. if you are switching
# from channel 1 to 8, listening to the 6 channels in between might be a waste of
# resources.
channelSwitchDelay: 2

# Seconds (int) - Walk me home lights.
# For how long the display lights should stay on after the display
# has been turned off. This is to let the user see temps and humidity after
# the radio has been turned off.
# Turns off instantly if 0
powerOffDisplayLightsDuration: 3600 # 1 hour


audio:
    # Bitrate (int)
    # The radio will choose the stream with bitrate closest to the value you set.
    # This variable will be moved to the server side later.
    # 32 kbps - Poor audio quality
    # 48 kbps - A reasonable lower end rate for longer speech-only podcasts
    # 64 kbps - A common bitrate for speech podcasts.
    # 128 kbps - Common standard for musical and high quality podcasts.
    # 320 kbps - Very high quality - almost indistinguishable from a CD.
    bitrate: 128

    # Volume (int, 0 - 100)
    # If you have a separate amp, this value shouldn't be too high. The built in
    # sound card isn't the best.
    volume: 40


# Setup your components.
# If you are missing a component, it's easy to contribute to the project to add
# support for new components.
components:
    # Array of displays. Only one display is supported at this time.
    displays:
        - type: Character LCD
          width: 16
          height: 2
          GPIO:
              rs: 14
              en: 15
              data4: 9
              data5: 7
              data6: 5
              data7: 11
              # Optional backlight pin with PWM
              backlight: 13
          # Backlight mode (string)
          # Values: active_high or active_low
          # If you use an active high circuit instead of active low, you can change
          # that behavior by setting the backlight_mode to either active_high or
          # active_low
          backlightMode: active_high
          lcdCompatibilityMode: true
          dotSize: 8
          lcdCharacterMap: A02
          oneDisplayLineIsTwoLines: false
          # (int) - Default 50 milliseconds
          # Minimum milliseconds between two writes to the display. If the
          # display is slow, this can combat the display becoming corrupted. 
          writeDelay: 50

    # Object. Clicking it will toggle the radio's on state.
    powerButton:
        GPIO: 10

    # Object. Not recommended for radio's which will be turned on/off remotely, as
    # it will get out of sync with the radio's power state.
    # powerSwitch:
    #     GPIO: 17

    # Object. Rotary for navigating left and right.
    navigationRotary:
        GPIO:
            clk: 26
            data: 6

    # Object. Single button to do all navigation. Click goes to the next channel,
    # long click goes to the previous channel, while extra long press resets the
    # radio. Holding the button while starting up, will trigger a manual update
    # of the radio's software.
    # navigationButton:
    #     GPIO:
    #         data: 8
    
    # Object. An alternative to the easier to use navigationRotary, where left
    # is equal to scrolling to the left.
    # navigationButtons:
        # GPIO:
        #     left: 12
        #     right: 13

    # Object. Rotary for controlling the volume.
    volumeRotary:
        GPIO:
            clk: 20
            data: 12
    
    # Object. An alternative to the easier to use volumeRotaries, where down is
    # equal to rotating the volume rotary to the left.
    # volumeButtons:
    #     GPIO:
    #         up: 12
    #         down: 13

    # Object. A light which is turned on/off along with the radio to symbolize it's
    # current state.
    # powerLight:
    #     GPIO: 12

    # Object. Humidity/temperature sensors.
    DHT22:
        GPIO: 22